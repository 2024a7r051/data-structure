//Implement a Binary Search Tree using Linked List and develop functions to perform traversal, searching, insertion and deletion operations. 
#include <stdio.h>
#include <stdlib.h>

struct TreeNode {
    int data;
    struct TreeNode *left, *right;
};

// Create a new node
struct TreeNode *createNode(int value) {
    struct TreeNode *node = (struct TreeNode *)malloc(sizeof(struct TreeNode));
    node->data = value;
    node->left = node->right = NULL;
    return node;
}

// Insert a value into BST
struct TreeNode *insert(struct TreeNode *root, int value) {
    if (root == NULL)
        return createNode(value);
    else if (value < root->data)
        root->left = insert(root->left, value);
    else if (value > root->data)
        root->right = insert(root->right, value);
    return root;
}

// Inorder traversal
void inorder(struct TreeNode *root) {
    if (root == NULL) return;
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}

// Preorder traversal
void preorder(struct TreeNode *root) {
    if (root == NULL) return;
    printf("%d ", root->data);
    preorder(root->left);
    preorder(root->right);
}

// Postorder traversal
void postorder(struct TreeNode *root) {
    if (root == NULL) return;
    postorder(root->left);
    postorder(root->right);
    printf("%d ", root->data);
}

// Search for a value in BST
struct TreeNode *search(struct TreeNode *root, int value) {
    if (root == NULL || root->data == value)
        return root;
    else if (value < root->data)
        return search(root->left, value);
    else
        return search(root->right, value);
}

// Find the minimum value node
struct TreeNode *findMin(struct TreeNode *node) {
    while (node && node->left != NULL)
        node = node->left;
    return node;
}

// Delete a node from BST
struct TreeNode *delete(struct TreeNode *root, int value) {
    if (root == NULL)
        return NULL;

    if (value < root->data)
        root->left = delete(root->left, value);
    else if (value > root->data)
        root->right = delete(root->right, value);
    else {
        // Node found
        if (root->left == NULL) {
            struct TreeNode *temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL) {
            struct TreeNode *temp = root->left;
            free(root);
            return temp;
        }

        // Node with two children
        struct TreeNode *temp = findMin(root->right);
        root->data = temp->data;
        root->right = delete(root->right, temp->data);
    }
    return root;
}

int main() {
    int choice, val;
    struct TreeNode *root = NULL;

    while (1) {
        printf("1. Insert\n");
        printf("2. Preorder Traversal\n");
        printf("3. Inorder Traversal\n");
        printf("4. Postorder Traversal\n");
        printf("5. Search\n");
        printf("6. Delete\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            printf("Enter value to insert: ");
            scanf("%d", &val);
            root = insert(root, val);
            break;
        case 2:
            printf("Preorder Traversal: ");
            preorder(root);
            printf("\n");
            break;
        case 3:
            printf("Inorder Traversal: ");
            inorder(root);
            printf("\n");
            break;
        case 4:
            printf("Postorder Traversal: ");
            postorder(root);
            printf("\n");
            break;
        case 5:
            printf("Enter value to search: ");
            scanf("%d", &val);
            if (search(root, val))
                printf("Value %d found in the BST.\n", val);
            else
                printf("Value %d not found in the BST.\n", val);
            break;
        case 6:
            printf("Enter value to delete: ");
            scanf("%d", &val);
            root = delete(root, val);
            break;
        case 7:
            exit(0);
        default:
            printf("Invalid choice! Try again.\n");
        }
        printf("\n");
    }

    return 0;
}
